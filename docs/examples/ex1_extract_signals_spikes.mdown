## Example 1: extracting signals from two tetrodes
Suppose we have recorded some neural activity using two tetrodes, during which two different stimuli were delivered. We wish to examine the effect of the stimulation on neural firing rates. First let us create an instance of the *Block* class to simplify subsequent data storage.

``` matlab
fileName = '07-21-17_mouse1_trial2.rec';
date = '07-21-17_15-45-13'; % date and time
condition = 'two stims';
filePath = '\Documents\Recordings\Tetrodes';

% create our Block instance. 
% For interpretability, it is easiest to assign the instances to variables with similar names as the classes they intantiate
block = Block( fileName,date,condition,filepath ); 
```

Now that we have created our Block, we want to next extract the relevant Signals. First lets load the raw data and create the two Epochs. 

``` matlab
% load the raw data
[data,samplingRate] = my_data_loader( [block.filepath,'\',block.filename] );
tetrodeChans = [1,2,7,8; 3,4,5,6]; % each row represents channels for one tetrode

% create our Epochs given the stimuli
stims = [20,43]; % 20s and 43s into the recording
stimWindow = 5; % extract 5s pre/post each stim
for i = 1:numel( stims )
    block.addChild( Epoch( stims(j)-stimWindow,stims(j)+stimWindow,i ) ); % creates an Epoch instances, stored into the block parent
    thisEpoch = block.getChild( 'Epoch',i ); % point to the ith epoch. No memory overhead in creating this local variable 
    thisEpoch.name = sprintf( 'stim %i' ); % gives it a specific name for us to remember later
    thisEpoch.addEvent( stims(i) ); % adds the time of the stim for each 
end
```

Note that we did not have to re-add the epochs back to the parent block after updating some of their properties. This is because the local variable `thisEpoch` pointed to the same physical memory as that particular epoch instance contained within the block. In other words, updating `thisEpoch` updated the underlying representation of memory pointed to by both `thisEpoch` and `block.getChild( 'Epoch',i )`. This is the beauty of referencing vs. copying: we can take the viewpoint of the underlying memory through different objects, depending on what makes sense at the time. We also avoid having to re-copy all of the contents of the class instances after each update.

Now extract the actual voltage traces for each epoch and for each electrode. Then store back into the block object so that everything is updated.

``` matlab
% pull out the child epochs and get the starting and ending indices for pulling out raw voltage
epochs = block.getChild( 'Epoch' ); % pull out the epoch children
epochStarts = round( [epochs.startTime] * samplingRate );
epochEnds = round( [epochs.stopTime] * samplingRate );

% now extract the voltage traces for each Electrode (i.e. each column of the data) & epoch
for ch = 1:size( data,2 )
    electrode(ch) = Electrode( ch ); % create an Electrode object for this channel
    for ep = 1:numel( epochs )
        signal = Signal( data(epochStarts(ep):epochEnds(ep),ch),samplingRate ); % create a signal, defined by the start/ending times of the epoch
        signal.filter( 300,6000 ); % filter for spikes (300 - 6000 Hz)
        epochs(ep).addChild( signal ); % point this signal to the correct epoch
        electrode(ch).addChild( signal ); % now point it to the correct electrode.
    end
end
block.addChild( electrode ); % adds the electrodes to the block
```

We just created 16 new Signal instances, each of which contains a *copy* of a small segment of data for a particular epoch and particular electrode. We then filtered the data of each signal between [300, 6000] Hz, and finally stored all the signals for a particular electrode into an Electrode instance. Note that our `electrode` variable is 1x8 here, where each dimension represents another electrode. Rather than performing `block.addChild( electrode )` for each pass of the for loop, we can just add all 1x8 electrode objects simultaneously. Also note that each `signal` now correctly references the parent `electrode` and `epoch`.

Finally, group our electrodes into two distinct tetrodes, so that we can perform spike detecting separately for the two groups of electrodes. We will detect spikes and leave them unsorted for now. This results in one Neuron instance created for each tetrode with `ID = 0`. In general, any Neuron with `ID = 0` signifies unsorted spikes. When sorting, one may deem some spike waveforms as unsortable, in which case they will be added to the `ID = 0` neuron. 

``` matlab
% create two ChannelIndex objects to group the electrodes into two tetrodes
for chGroup = 1:size( tetrodeChans,1 )
    channelindex = ChannelIndex( chGroups ); % create a new ChannelIndex instance
    thisTetrode = electrode(tetrodeChans(chGroup,:)); % point to the correct group of electrodes for this tetrode (no memory overhead)
    channelindex.addChild( thisTetrode ); % adds appropriate electrode group
    channelindex.name = sprintf( 'tetrode %i',chGroup ); % gives the channelindex a name for identifying which tetrode
    block.addChild( channelindex )
ende

% finally, detect spikes in our filtered data using the channelindex.detectSpikes() method
% each ChannelIndex object will now contain one Neuron instance, and that neuron will have two Spikes instances (one for each epoch)
block.getChild( 'ChannelIndex',1 ).detectSpikes( 5,1000 ); % spike threshold of 5 * noise SD, artifact threshold = 1000 uV
block.getChild( 'ChannelIndex',2 ).detectSpikes( 3,1000 ); % here we use a lower threshold, as this tetrode was less noisy
```

Now that we have created our electrodes & tetrode groups, extracted epochs and signals, and detected spikes, we want to save our block to disk for later analysis

``` matlab
saveDirectory = '\Documents\Analysis\Tetrodes';
block.write( saveDirectory );
block.print();
```

The `block.write()` method takes an output directory as an argument and saves the block object (and its children) under the filename: `block.filename_extractedData.mat`. The `block.print()` method prints some useful summary information to the matlab screen. 
